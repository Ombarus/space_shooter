[gd_scene load_steps=5 format=2]

[ext_resource path="res://scenes/sr_wormhole/explosion_test_gb.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float strength = 200.0;

uniform float outer_slope = -10.0;
uniform float inner_slope = 80.0;
uniform float intersection_dist = 0.2;
uniform float intersection_mult = 4.0;

uniform vec4 color_multiplier = vec4(1.0, 1.0, 1.0, 1.0);

vec2 tex_center_in_screen_uv(vec2 tex_uv, vec2 screen_uv, vec2 texture_pixel_size, vec2 screen_pixel_size) {
	vec2 dist_tex = vec2(0.5, 0.5) - tex_uv;
	vec2 dist_pixel = dist_tex / texture_pixel_size;
	vec2 dist_screen = dist_pixel * screen_pixel_size;
	// Not sure why I need this but it works !
	dist_screen.y *= -1.0;
	return screen_uv + dist_screen;
}



// WORKS PERFECT SWIRL

void fragment() {
	// Get the sprite's center in screen UVs
	vec2 uv = UV;
	vec2 screen_uv = SCREEN_UV;
	vec2 tex_size = TEXTURE_PIXEL_SIZE;
	vec2 screen_size = SCREEN_PIXEL_SIZE;
	vec2 center_tex_screen_uv = tex_center_in_screen_uv(uv, screen_uv, tex_size, screen_size);
	float aspect = SCREEN_PIXEL_SIZE.y / SCREEN_PIXEL_SIZE.x;
	
	// Calculate the spiral based on the distance from center
	vec2 rel = (uv - vec2(0.5, 0.5));
	float angle = length(rel)*strength;
	// not required but help for visualization to keep it within 0 and 2pi when debugging
	angle = fract(angle / (2.0*3.14159265)) * (2.0*3.14159265);
	
	// Rotation matrix
	mat2 rot = mat2(vec2(cos(angle),-sin(angle)),vec2(sin(angle),cos(angle)));
	vec2 coord = screen_uv - center_tex_screen_uv;
    rel = vec2(coord.x * aspect, coord.y) * rot;
    vec2 final_uv = clamp(vec2((rel.x/aspect) + center_tex_screen_uv.x, rel.y + center_tex_screen_uv.y),vec2(0,0),vec2(1,1));
	
	vec4 final_color = textureLod(SCREEN_TEXTURE, final_uv, 0.0);
	
	// Do the same thing with a custom texture for added \"punch\"
	float dist_center = length(uv - vec2(0.5, 0.5));
	
	vec2 tex_uv = UV;
	tex_uv = (tex_uv - vec2(0.5, 0.5)) * rot;
	tex_uv = clamp(tex_uv + vec2(0.5, 0.5), vec2(0,0), vec2(1,1));
	vec4 tex_color = textureLod(TEXTURE, tex_uv, 0.0) * 2.0;
	final_color = mix(tex_color, final_color, dist_center*4.0);
	
	// black middle hole	
	float mult = 1.0;
	float b1 = intersection_mult - (outer_slope * intersection_dist);
	float b2 = intersection_mult - (inner_slope * intersection_dist);
	
	if (dist_center >= intersection_dist) {
		mult = outer_slope * dist_center + b1;
		mult = clamp(mult, 1.0, intersection_mult);
		final_color *= mult;
	}
	else {
		mult = inner_slope * dist_center + b2;
		mult = clamp(mult, 0.0, intersection_mult);
		final_color *= mult;
	}
	
	final_color *= color_multiplier;
	
	final_color.a = 1.0;
	
	// Blend at the corner
	vec4 normal_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0);
	float mixer = smoothstep(0.3, 0.5, dist_center);
	//float mixer = clamp(dist_center*2.0, 0.0, 1.0);
	final_color = mix(final_color, normal_color, mixer);
	
	COLOR.rgba = final_color;
}



// WORKS PERFECT SWIRL
/*
void fragment() {
	vec2 uv = UV;
	vec2 screen_uv = SCREEN_UV;
	vec2 tex_size = TEXTURE_PIXEL_SIZE;
	vec2 screen_size = SCREEN_PIXEL_SIZE;
	//vec2 center_tex_screen_uv = vec2(0.5,0.5);
	vec2 center_tex_screen_uv = tex_center_in_screen_uv(uv, screen_uv, tex_size, screen_size);
	float aspect = SCREEN_PIXEL_SIZE.y / SCREEN_PIXEL_SIZE.x;
	
	vec2 rel = (uv - vec2(0.5, 0.5));
	float angle = length(rel)*strength;
	// not required but help for visualization to keep it within 0 and 2pi when debugging
	angle = fract(angle / (2.0*3.14159265)) * (2.0*3.14159265);
	
	mat2 rot = mat2(vec2(cos(angle),-sin(angle)),vec2(sin(angle),cos(angle)));
	vec2 coord = screen_uv - center_tex_screen_uv;
    rel = vec2(coord.x * aspect, coord.y) * rot;
    vec2 final_uv = clamp(vec2((rel.x/aspect) + center_tex_screen_uv.x, rel.y + center_tex_screen_uv.y),vec2(0,0),vec2(1,1));
	
	vec4 final_color = textureLod(SCREEN_TEXTURE, final_uv, 0.0);
	float dist_center = length(uv - vec2(0.5, 0.5));
	if (dist_center < 0.1) {
		final_color = vec4(0.0, 0.0, 0.0, 1.0);
	}
	
	//COLOR.rgba = mix(vec4(r, 0.0, 0.0, 1.0), textureLod(SCREEN_TEXTURE, final_uv, 0.0), 0.5);
	//COLOR.rgba = vec4(r, 0.0, 0.0, 1.0);
	COLOR.rgba = final_color;
}
*/"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/strength = 21.36
shader_param/outer_slope = -15.95
shader_param/inner_slope = 59.76
shader_param/intersection_dist = 0.2
shader_param/intersection_mult = 3.14
shader_param/color_multiplier = Plane( 0.85, 0.97, 0.24, 1 )

[sub_resource type="Animation" id=3]
resource_name = "rotating"
length = 10.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 10 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 360.0 ]
}

[node name="Node2D" type="Control"]
__meta__ = {
"_edit_use_anchors_": false
}

[node name="fx" type="TextureRect" parent="."]
material = SubResource( 2 )
margin_left = -32.0
margin_top = -32.7928
margin_right = 32.0
margin_bottom = 31.2072
rect_scale = Vector2( 10, 10 )
rect_pivot_offset = Vector2( 32, 32 )
texture = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="fx"]
autoplay = "rotating"
anims/rotating = SubResource( 3 )
